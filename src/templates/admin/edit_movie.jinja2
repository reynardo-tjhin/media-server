<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin - {{ action | capitalize }} Movie</title>

    <!-- CSS -->
    <link rel="stylesheet" href="{{ url_for('static', filename='admin/edit_movie.css') }}">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
</head>
<body>
    <div class="container">
        <div class="breadcrumbs">
            <div class="navigation">
                <a href="{{ url_for('admin.home') }}">Home (Admin)</a> > <a href="{{ url_for('admin.movies') }}">Movies Dashboard</a> > <span>{{ action | capitalize }} Movie</span>
            </div>
            <button class="theme-toggle" onclick="toggleTheme()">🌙 Dark</button>
        </div>

        <div class="header">
            {% if action == 'add' %}
                <h1>Add a New Movie</h1>
            {% else %}
                <h1>Update an Existing Movie</h1>
            {% endif %}
            <p>Please fill in the details</p>
        </div>

        <!-- show error -->
        {% with error = get_flashed_messages() %}
        <div id="error-message">
            {% if error is defined %}
                <input disabled type="text" id="error-input" value="{{ error[0] }}">
            {% endif %}
        </div>
        {% endwith %}

        <!-- movie form -->
        <form method="post" id="movieForm" novalidate>
            {# Template does not use FlaskForm, render a hidden input with the token in the form #}
            <input type="hidden" name="csrf_token" value="{{ csrf_token() }}"/>

            {# Basic Information about the movie: name, description, release date and media location #}
            <div class="form-group">
                <label for="movieName">Movie Name</label>
                <input name="movieName" type="text" id="movieName" value="{{ movie.name or '' }}" required>
            </div>
            <div class="form-group">
                <label for="movieDescription">Description</label>
                <input name="movieDescription" type="text" id="movieDescription" value="{{ movie.description or '' }}" required>
            </div>
            <div class="form-group">
                <label for="datepicker">Release Date</label>
                <input name="releaseDate" type="text" id="datepicker" placeholder="Select date" required value="{{ movie.release_date or '' }}">
            </div>
            <div class="form-group">
                <label for="mediaLocation">Media Location</label>
                <input name="mediaLocation" type="text" id="mediaLocation" required value="{{ movie.media_location or '' }}">
            </div>
            <div class="form-group">
                <label for="posterLocation">Poster Location</label>
                <input name="posterLocation" type="text" id="posterLocation" required value="{{ movie.poster_location or '' }}">
            </div>

            {# Different ratings of the movie: IMDb, Rotten Tomatoes and Metacritic#}
            <div class="form-group">
                <label for="imdbRating">IMDb Rating</label>
                <input name="imdbRating" type="text" id="imdbRating" value="{{ movie.imdb_rating or '' }}">
            </div>
            <div class="form-group">
                <label for="rottenTomatoesRating">Rotten Tomatoes</label>
                <input name="rottenTomatoesRating" type="number" id="rottenTomatoesRating" value="{{ movie.rotten_tomatoes_rating or '' }}" min="0" max="100">
            </div>
            <div class="form-group">
                <label for="metacriticRating">Metacritic Rating</label>
                <input name="metacriticRating" type="number" id="metacriticRating" value="{{ movie.metacritic_rating or '' }}" min="0" max="100">
            </div>

            {# Genres of the movie #}
            <div class="form-group">
                <label>Genre(s):</label>
                <div class="genre-container">
                    {% for genre in genres %}
                        <div class="checkbox-group">
                            <input {{ genre.checked }} name="{{ genre.id }}" type="checkbox" id="{{ genre.id }}" value="{{ genre.name }}">
                            <label for="{{ genre.id }}">{{ genre.name }}</label>
                        </div>
                    {% endfor %}
                </div>
            </div>

            <!-- contorls - cancel/add -->
            <div class="controls">
                <a href="{{ url_for('admin.movies') }}" class="button">Cancel</a>
                {% if action == 'add' %}
                    <button type="submit" class="btn btn-success" id="submitBtn">Add Movie</button>
                {% else %}
                    <button type="submit" class="btn btn-success" id="submitBtn">Update Movie</button>
                {% endif %}
            </div>
        </form>
    </div>

    <!-- JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/flatpickr/4.6.13/flatpickr.min.js"></script>
    <script>
        // for inputing the release date
        flatpickr("#datepicker", {
            dateFormat: "Y-m-d",
        });

        // no error: don't show the error-message div
        let err = document.getElementById('error-input');
        if (err.value === '') {
            document.getElementById('error-message').style = "display: none;";
        } else {
            document.getElementById('error-message').style = "display: block;";
        }

        // dark-light theme
        function toggleTheme() {
            let html = document.documentElement;
            let currentTheme = html.getAttribute('data-theme');
            let button = document.querySelector(".theme-toggle");

            if (currentTheme === 'dark') {
                button.textContent = "🌙 Dark";
                html.setAttribute('data-theme', 'light');
                localStorage.setItem('theme', 'light');
            } else {
                button.textContent = "☀️ Light";
                html.setAttribute('data-theme', 'dark');
                localStorage.setItem('theme', 'dark');
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            const savedTheme = localStorage.getItem('theme');
            if (savedTheme === 'dark') {
                document.documentElement.setAttribute('data-theme', 'dark');
                document.querySelector(".theme-toggle").textContent = "☀️ Light";
            } else {
                document.documentElement.setAttribute('data-theme', 'light');
                document.querySelector(".theme-toggle").textContent = "🌙 Dark";
            }
        });

        // validation check
        let form = document.getElementById('movieForm');
        form.addEventListener('submit', (event) => {

            // prevent the form from submitting by default
            event.preventDefault();
            let isValid = true;

            // validate the ratings
            let imdbRating = document.getElementById('imdbRating');
            if (imdbRating.value > 10 || imdbRating.value < 0) {
                isValid = false;
                document.getElementById('error-input').value = "Error: IMDb Rating cannot be less than 0 or greater than 10";
                document.getElementById('error-message').style = "display: block;";
                imdbRating.style = "border-color: #e74c3c;";
            } else {
                imdbRating.style = "border-color: #27ae60;";
            }
            let rottenTomatoesRating = document.getElementById('rottenTomatoesRating');
            if (rottenTomatoesRating.value > 100 || rottenTomatoesRating.value < 0) {
                isValid = false;
                document.getElementById('error-input').value = "Error: Rotten Tomatoes Rating cannot be less than 0 or greater than 100";
                document.getElementById('error-message').style = "display: block;";
                rottenTomatoesRating.style = "border-color: #e74c3c;";
            } else {
                rottenTomatoesRating.style = "border-color: #27ae60;";
            }
            let metacriticRating = document.getElementById('metacriticRating');
            if (metacriticRating.value > 100 || metacriticRating.value < 0) {
                isValid = false;
                document.getElementById('error-input').value = "Error: Metacritic Rating cannot be less than 0 or greater than 100";
                document.getElementById('error-message').style = "display: block;";
                metacriticRating.style = "border-color: #e74c3c;";
            } else {
                metacriticRating.style = "border-color: #27ae60;";
            }

            // improve user experience by scrolling to the top if there is any error
            window.scrollTo({
                top: 0,
                behavior: 'smooth',
            });

            // perform form submission if validation passes
            if (isValid) {
                console.log("Form is valid! Submitting the form...!");
                form.submit();
            }
        });
    </script>
</body>
</html>